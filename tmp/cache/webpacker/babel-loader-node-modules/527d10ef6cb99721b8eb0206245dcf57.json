{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/learnacademy/Desktop/apartment-app-jeremyagabriel/app/javascript/components/pages/Favorites.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Container } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nvar Favorites = function Favorites(props) {\n  // Array of apartment objects favorited by current user\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      favApts = _useState2[0],\n      setFavApts = _useState2[1];\n\n  useEffect(function () {\n    getFavApartments();\n  }, []);\n\n  function getFavApartments() {\n    return _getFavApartments.apply(this, arguments);\n  }\n\n  function _getFavApartments() {\n    _getFavApartments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var favResponse, favData, favAptIdsArray, aptResponse, aptData, sortedAptData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(\"/favorites\");\n\n            case 3:\n              favResponse = _context.sent;\n              _context.next = 6;\n              return favResponse.json();\n\n            case 6:\n              favData = _context.sent;\n\n              if (favResponse.ok) {\n                console.log(\"favData:\", favData); // Create array of just the ids of the apts favorited by current user\n\n                favAptIdsArray = favData.map(function (value) {\n                  return value.listing;\n                });\n                console.log(\"favAptIdsArray:\", favAptIdsArray);\n              } // Fetch the apartment JSON specific to apt id\n\n\n              _context.next = 10;\n              return fetch(\"/apartments\");\n\n            case 10:\n              aptResponse = _context.sent;\n              _context.next = 13;\n              return aptResponse.json();\n\n            case 13:\n              aptData = _context.sent;\n\n              if (aptResponse.ok) {\n                console.log(\"aptData\", aptData); // let sortedAptData = apts.sort((a,b) => {\n                //   if (a.id === b.id) return 0\n                //   else if (a.id > b.id) return 1\n                //   else return -1\n                // })\n\n                sortedAptData = aptData.filter(function (apt, index) {\n                  return favAptIdsArray.includes(apt.id);\n                }); // Set state of the current apt to access data later\n\n                setFavApts(sortedAptData);\n              }\n\n              _context.next = 20;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 17]]);\n    }));\n    return _getFavApartments.apply(this, arguments);\n  }\n\n  var getFavorites = function getFavorites() {\n    // Get JSON from the Favorite instances with user_id of current user\n    fetch(\"/favorites\").then(function (response) {\n      if (response.ok) return response.json();\n    }).then(function (favs) {\n      // Pull only the apt id (i.e. listing) from each favorite object\n      var favIds = favs.map(function (value) {\n        return value.listing;\n      });\n      console.log(favIds);\n      setFavAptIds(favIds);\n    }).then(function () {\n      return fetch(\"http://localhost:3000/apartments\");\n    }).then(function (response) {\n      if (response.ok) return response.json();\n    }).then(function (apts) {\n      // Order the array of apartments by apt id\n      var sortedApts = apts.sort(function (a, b) {\n        if (a.id === b.id) return 0;else if (a.id > b.id) return 1;else return -1;\n      });\n      console.log(sortedApts);\n      setApts(sortedApts);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n    style: {\n      marginBottom: \"50px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      textAlign: \"center\",\n      margin: \"80px 0 10px 0\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, \"Listings You're Following\"), favApts.map(function (apt, index) {\n    {\n      /* Map thru the apt objects and only return those where favorite user_id is the same as current user's id */\n    }\n\n    if (favAptIds.includes(apt.id)) {\n      var owner = false;\n      {\n        /*Set local variable to true if the apt's user_id is the same as the current user's id*/\n      }\n      if (apt.user_id === props.currentUserId) owner = true;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"index-listing-container\",\n        key: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(NavLink, {\n        className: \"index-listing-image-wrapper\",\n        to: \"/listings/\".concat(apt.id),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"index-listing-image\",\n        src: apt.image_url,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 93\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"index-listing-right\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }, owner && /*#__PURE__*/React.createElement(\"p\", {\n        className: \"owner-message\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }\n      }, \"This is your listing\"), /*#__PURE__*/React.createElement(NavLink, {\n        className: \"index-listing-title\",\n        to: \"/listings/\".concat(apt.id),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 19\n        }\n      }, apt.subject), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"index-listing-copy\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 19\n        }\n      }, apt.bedroom_count, \" Bedroom, \", apt.bathroom_count, \" Bath\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 91\n        }\n      }), apt.city, \", \", apt.state, \" \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 46\n        }\n      }), apt.rent)));\n    }\n  })));\n};\n\nexport default Favorites;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/apartment-app-jeremyagabriel/app/javascript/components/pages/Favorites.js"],"names":["React","useState","useEffect","Container","NavLink","Favorites","props","favApts","setFavApts","getFavApartments","fetch","favResponse","json","favData","ok","console","log","favAptIdsArray","map","value","listing","aptResponse","aptData","sortedAptData","filter","apt","index","includes","id","getFavorites","then","response","favs","favIds","setFavAptIds","apts","sortedApts","sort","a","b","setApts","marginBottom","textAlign","margin","favAptIds","owner","user_id","currentUserId","image_url","subject","bedroom_count","bathroom_count","city","state","rent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container } from 'reactstrap'\nimport { NavLink } from 'react-router-dom'\n\nconst Favorites = props => {\n  // Array of apartment objects favorited by current user\n  const [favApts, setFavApts] = useState([])\n\n  useEffect(() =>{\n    getFavApartments()},[])\n\n  async function getFavApartments () {\n    try {\n      // Fetch JSON of favorites specific to current user\n      let favResponse = await fetch(\"/favorites\")\n      let favData = await favResponse.json()\n      // Declare array to hold only favorited apt ids to be used in both if-statements below\n      let favAptIdsArray\n      if(favResponse.ok) {\n        console.log(\"favData:\", favData)\n        // Create array of just the ids of the apts favorited by current user\n        favAptIdsArray = favData.map(value=>value.listing)\n        console.log(\"favAptIdsArray:\",favAptIdsArray)\n      }\n\n      // Fetch the apartment JSON specific to apt id\n      let aptResponse = await fetch(`/apartments`)\n      let aptData = await aptResponse.json()\n      if(aptResponse.ok) {\n        console.log(\"aptData\",aptData)\n        // let sortedAptData = apts.sort((a,b) => {\n        //   if (a.id === b.id) return 0\n        //   else if (a.id > b.id) return 1\n        //   else return -1\n        // })\n        let sortedAptData = aptData.filter((apt,index) => {\n          return favAptIdsArray.includes(apt.id)\n        })\n        // Set state of the current apt to access data later\n        setFavApts(sortedAptData)\n      }\n    } catch (err) {\n        console.log(err)\n    }\n  }\n\n  const getFavorites = () => {\n    // Get JSON from the Favorite instances with user_id of current user\n    fetch(\"/favorites\")\n    .then(response => {\n      if(response.ok) return response.json()\n    })\n    .then(favs => {\n      // Pull only the apt id (i.e. listing) from each favorite object\n      let favIds = favs.map(value=>value.listing)\n      console.log(favIds)\n      setFavAptIds(favIds)\n    })\n    .then(() => {\n      return fetch(\"http://localhost:3000/apartments\")\n    })\n    .then(response => {\n      if(response.ok) return response.json()\n    })\n    .then(apts => {\n      // Order the array of apartments by apt id\n      let sortedApts = apts.sort((a,b) => {\n        if (a.id === b.id) return 0\n        else if (a.id > b.id) return 1\n        else return -1\n      })\n      console.log(sortedApts)\n      setApts(sortedApts)\n    })\n  }\n\n  return(\n    <>\n      <Container style={{marginBottom:\"50px\"}}>\n      <h3 style={{textAlign:\"center\",margin:\"80px 0 10px 0\"}}>Listings You're Following</h3>\n        {favApts.map((apt,index) => {\n          {/* Map thru the apt objects and only return those where favorite user_id is the same as current user's id */}\n          if (favAptIds.includes(apt.id)) {\n            let owner = false\n            {/*Set local variable to true if the apt's user_id is the same as the current user's id*/}\n            if (apt.user_id === props.currentUserId) owner = true\n            return(\n              <div className=\"index-listing-container\" key={index}>\n                <NavLink className=\"index-listing-image-wrapper\" to={`/listings/${apt.id}`}><img className=\"index-listing-image\" src={apt.image_url} /></NavLink>\n                <div className=\"index-listing-right\">\n                  {owner && <p className=\"owner-message\">This is your listing</p>}\n                  <NavLink className=\"index-listing-title\" to={`/listings/${apt.id}`}>{ apt.subject }</NavLink>\n                  <p className=\"index-listing-copy\">\n                  <strong>{apt.bedroom_count} Bedroom, {apt.bathroom_count} Bath</strong> <br/>\n                  { apt.city}, { apt.state } <br/>\n                  { apt.rent }\n                  </p>\n                </div>\n              </div>\n            )\n          }\n        })}\n      </Container>\n    </>\n  )\n}\n\nexport default Favorites\n"]},"metadata":{},"sourceType":"module"}