{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/learnacademy/Desktop/apartment-app-jeremyagabriel/app/javascript/components/pages/ApartmentProfile.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from 'react';\nimport { ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText, Button, Container, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { Redirect, NavLink } from 'react-router-dom';\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport { Carousel } from 'react-responsive-carousel';\n\nvar ApartmentProfile = function ApartmentProfile(props) {\n  // Success is true when delete is successful\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      success = _useState2[0],\n      setSuccess = _useState2[1]; // Error is true when delete is unsuccessful\n\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1]; // Editable is true when current user owns current apt\n\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      editable = _useState6[0],\n      setEditable = _useState6[1]; // Empty obj is filled upon the show fetch of current apt\n\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentApt = _useState8[0],\n      setCurrentApt = _useState8[1]; // Modal is true when first delete button is clicked\n\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      modal = _useState10[0],\n      setModal = _useState10[1]; // Favorited is toggled true/false upon the post or delete fetch to Favorite model\n\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      favorited = _useState12[0],\n      setFavorited = _useState12[1]; // Array of just apt Ids favorited by the current user\n\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      favAptIds = _useState14[0],\n      setFavAptIds = _useState14[1]; // Favorite model id of the current apt showing\n\n\n  var _useState15 = useState(),\n      _useState16 = _slicedToArray(_useState15, 2),\n      favId = _useState16[0],\n      setFavId = _useState16[1]; // Apt id of the current apt showing\n\n\n  var _useState17 = useState(),\n      _useState18 = _slicedToArray(_useState17, 2),\n      aptId = _useState18[0],\n      setAptId = _useState18[1]; // Function to toggle delete modal\n\n\n  var toggle = function toggle() {\n    return setModal(!modal);\n  }; // Trigger 'get' for favorites and apartments upon mount\n\n\n  useEffect(function () {\n    getApartment();\n  }, []);\n\n  function getApartment() {\n    return _getApartment.apply(this, arguments);\n  } // Post apt id of favorited to Favorite model\n\n\n  function _getApartment() {\n    _getApartment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var favResponse, favData, favAptIdsArray, aptResponse, aptData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(\"/favorites\");\n\n            case 3:\n              favResponse = _context.sent;\n              _context.next = 6;\n              return favResponse.json();\n\n            case 6:\n              favData = _context.sent;\n\n              if (favResponse.ok) {\n                console.log(\"favData:\", favData);\n                favData.map(function (value) {\n                  // Determine the favorite id (for use in favorite delete call) if current apt is currently favorited\n                  if (value.listing == props.match.params.id) setFavId(value.id);\n                }); // Create array of just the ids of the apts favorited by current user\n\n                favAptIdsArray = favData.map(function (value) {\n                  return value.listing;\n                });\n                console.log(\"favAptIdsArray:\", favAptIdsArray);\n                setFavAptIds(favAptIdsArray);\n              } // Fetch the apartment JSON specific to apt id\n\n\n              _context.next = 10;\n              return fetch(\"/apartments/\".concat(props.match.params.id));\n\n            case 10:\n              aptResponse = _context.sent;\n              _context.next = 13;\n              return aptResponse.json();\n\n            case 13:\n              aptData = _context.sent;\n\n              if (aptResponse.ok) {\n                console.log(\"aptData\", aptData); // Set editable to true if the apt belows to the current user\n\n                if (props.currentUserId === aptData.user_id) setEditable(true); // Set state of the current apt to access data later\n\n                setCurrentApt(aptData);\n                setAptId(aptData.id); // Set favorited to true if the current user's array of favorited apt id's includes the apt displayed\n\n                if (favAptIdsArray.includes(aptData.id)) setFavorited(true);\n              }\n\n              _context.next = 20;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 17]]);\n    }));\n    return _getApartment.apply(this, arguments);\n  }\n\n  var addToFavorites = function addToFavorites() {\n    fetch(\"/favorites\", {\n      body: JSON.stringify({\n        listing: aptId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    }).then(function (response) {\n      if (response.ok) {\n        // If favorite post request is successful, set favorited to true\n        setFavorited(true);\n      }\n    }).then(function () {\n      // Call the apartment API call again to update frontend data\n      getApartment();\n    });\n  }; // Delete apt id from favorited from Favorite model\n\n\n  var removeFromFavorites = function removeFromFavorites() {\n    fetch(\"/favorites/\".concat(favId), {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"DELETE\"\n    }).then(function (response) {\n      if (response.ok) {\n        // If favorite delete request is successful, set favorited to false\n        setFavorited(false);\n      }\n    }).then(function () {\n      // Call the apartment API call again to update frontend data\n      getApartment();\n    });\n  }; // On click for the follow/following button\n\n\n  var handleFavorite = function handleFavorite(e) {\n    e.preventDefault();\n    if (!favAptIds.includes(currentApt.id)) addToFavorites();else removeFromFavorites();\n  }; // On click for the delete button within the modal\n\n\n  var handleDelete = function handleDelete(e) {\n    e.preventDefault();\n    deleteApt();\n  }; // Delete JSON of current apt from database\n\n\n  var deleteApt = function deleteApt() {\n    fetch(\"http://localhost:3000/apartments/\".concat(currentApt.id), {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"DELETE\"\n    }).then(function (response) {\n      if (response.ok) setSuccess(true);else setError(true);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"apt-profile-title\",\n    style: {\n      textAlign: \"center\",\n      margin: \"80px 0 10px 0\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, \"Apartment Profile\"), /*#__PURE__*/React.createElement(Carousel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: currentApt.image_url,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(ListGroup, {\n    style: {\n      marginBottom: \"50px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ListGroupItem, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: favorited ? \"success\" : \"secondary\",\n    onClick: handleFavorite,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, favorited && \"Following\", !favorited && \"Follow\"), editable && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"profile-owner-message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 26\n    }\n  }, \"This is your listing\"), /*#__PURE__*/React.createElement(ListGroupItemHeading, {\n    style: {\n      fontWeight: \"bold\",\n      fontSize: \"30px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, currentApt.subject), /*#__PURE__*/React.createElement(ListGroupItemText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, currentApt.bedroom_count, \" Bedroom, \", currentApt.bathroom_count, \" Bath \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 88\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 93\n    }\n  }), currentApt.street_number, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 44\n    }\n  }), currentApt.city, \", \", currentApt.state, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 56\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 61\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, currentApt.rent), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 52\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 57\n    }\n  }), currentApt.description, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 42\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 47\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 15\n    }\n  }, \"Building Manager:\"), \" \", currentApt.building_manager, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 81\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 15\n    }\n  }, \"Phone:\"), \" \", currentApt.phone, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 60\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }, \"Contact Hours:\"), \" \", currentApt.hours)), editable && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"edit-buttons-wrapper\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(NavLink, {\n    to: \"/listings/\".concat(currentApt.id, \"/edit\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }, \" \", /*#__PURE__*/React.createElement(Button, {\n    style: {\n      marginRight: \"10px\",\n      border: \"0px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 64\n    }\n  }, \"Edit Listing\")), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      backgroundColor: \"#ff726f\",\n      border: \"0px\"\n    },\n    type: \"submit\",\n    onClick: toggle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 15\n    }\n  }, \"Delete Listing\")))), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, \"Are you sure you want to delete your listing?\"), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NavLink, {\n    to: \"/listings\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"danger\",\n    onClick: handleDelete,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, \"Delete Listing\"), ' ', success && /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/listings\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    onClick: toggle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))));\n};\n\nexport default ApartmentProfile;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/apartment-app-jeremyagabriel/app/javascript/components/pages/ApartmentProfile.js"],"names":["React","useState","useEffect","ListGroup","ListGroupItem","ListGroupItemHeading","ListGroupItemText","Button","Container","Modal","ModalHeader","ModalBody","ModalFooter","Redirect","NavLink","Carousel","ApartmentProfile","props","success","setSuccess","error","setError","editable","setEditable","currentApt","setCurrentApt","modal","setModal","favorited","setFavorited","favAptIds","setFavAptIds","favId","setFavId","aptId","setAptId","toggle","getApartment","fetch","favResponse","json","favData","ok","console","log","map","value","listing","match","params","id","favAptIdsArray","aptResponse","aptData","currentUserId","user_id","includes","addToFavorites","body","JSON","stringify","headers","method","then","response","removeFromFavorites","handleFavorite","e","preventDefault","handleDelete","deleteApt","textAlign","margin","image_url","marginBottom","fontWeight","fontSize","subject","bedroom_count","bathroom_count","street_number","city","state","rent","description","building_manager","phone","hours","marginRight","border","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText, Button, Container, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\nimport { Redirect, NavLink } from 'react-router-dom'\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"\nimport { Carousel } from 'react-responsive-carousel'\n\nconst ApartmentProfile = props => {\n  // Success is true when delete is successful\n  const [success, setSuccess] = useState(false)\n  // Error is true when delete is unsuccessful\n  const [error, setError] = useState(false)\n  // Editable is true when current user owns current apt\n  const [editable, setEditable] = useState(false)\n  // Empty obj is filled upon the show fetch of current apt\n  const [currentApt, setCurrentApt] = useState({})\n  // Modal is true when first delete button is clicked\n  const [modal, setModal] = useState(false)\n  // Favorited is toggled true/false upon the post or delete fetch to Favorite model\n  const [favorited, setFavorited] = useState(false)\n  // Array of just apt Ids favorited by the current user\n  const [favAptIds, setFavAptIds] = useState([])\n  // Favorite model id of the current apt showing\n  const [favId, setFavId] = useState()\n  // Apt id of the current apt showing\n  const [aptId, setAptId] = useState()\n  // Function to toggle delete modal\n  const toggle = () => setModal(!modal)\n\n  // Trigger 'get' for favorites and apartments upon mount\n  useEffect(() =>{\n    getApartment()\n  },[])\n\n  async function getApartment () {\n    try {\n      // Fetch JSON of favorites specific to current user\n      let favResponse = await fetch(\"/favorites\")\n      let favData = await favResponse.json()\n      // Declare array to hold only favorited apt ids to be used in both if-statements below\n      let favAptIdsArray\n      if(favResponse.ok) {\n        console.log(\"favData:\", favData)\n        favData.map(value=> {\n          // Determine the favorite id (for use in favorite delete call) if current apt is currently favorited\n          if (value.listing == props.match.params.id) setFavId(value.id)\n        })\n        // Create array of just the ids of the apts favorited by current user\n        favAptIdsArray = favData.map(value=>value.listing)\n        console.log(\"favAptIdsArray:\",favAptIdsArray)\n        setFavAptIds(favAptIdsArray)\n      }\n\n      // Fetch the apartment JSON specific to apt id\n      let aptResponse = await fetch(`/apartments/${props.match.params.id}`)\n      let aptData = await aptResponse.json()\n      if(aptResponse.ok) {\n        console.log(\"aptData\",aptData)\n        // Set editable to true if the apt belows to the current user\n        if (props.currentUserId === aptData.user_id) setEditable(true)\n        // Set state of the current apt to access data later\n        setCurrentApt(aptData)\n        setAptId(aptData.id)\n        // Set favorited to true if the current user's array of favorited apt id's includes the apt displayed\n        if (favAptIdsArray.includes(aptData.id)) setFavorited(true)\n      }\n    } catch (err) {\n        console.log(err)\n    }\n  }\n\n  // Post apt id of favorited to Favorite model\n  const addToFavorites = () => {\n    fetch(\"/favorites\", {\n      body: JSON.stringify({listing: aptId}),\n      headers:{\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    })\n    .then(response => {\n      if (response.ok) {\n        // If favorite post request is successful, set favorited to true\n        setFavorited(true)\n      }\n    })\n    .then(() => {\n      // Call the apartment API call again to update frontend data\n      getApartment()\n    })\n  }\n\n  // Delete apt id from favorited from Favorite model\n  const removeFromFavorites = () => {\n    fetch(`/favorites/${favId}`, {\n      headers:{\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"DELETE\"\n    })\n    .then(response => {\n      if (response.ok) {\n        // If favorite delete request is successful, set favorited to false\n        setFavorited(false)\n      }\n    })\n    .then(() => {\n      // Call the apartment API call again to update frontend data\n      getApartment()\n    })\n  }\n\n  // On click for the follow/following button\n  const handleFavorite = e => {\n    e.preventDefault()\n    if (!favAptIds.includes(currentApt.id)) addToFavorites()\n    else removeFromFavorites()\n  }\n\n  // On click for the delete button within the modal\n  const handleDelete = e => {\n    e.preventDefault()\n    deleteApt()\n  }\n\n  // Delete JSON of current apt from database\n  const deleteApt = () => {\n    fetch(`http://localhost:3000/apartments/${currentApt.id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"DELETE\"\n    }).then(response => {\n        if (response.ok) setSuccess(true)\n        else setError(true)\n    })\n  }\n\n  return(\n    <>\n      <Container>\n        <h3 className=\"apt-profile-title\" style={{textAlign:\"center\", margin:\"80px 0 10px 0\"}}>Apartment Profile</h3>\n\n        {/*Image carousel from React package install*/}\n        <Carousel>\n          <div>\n              <img src={currentApt.image_url}/>\n          </div>\n        </Carousel>\n        <ListGroup style={{marginBottom:\"50px\"}}>\n          <ListGroupItem>\n            {/*Conditional render for how follow button looks between toggles*/}\n            <Button color={favorited ? \"success\" : \"secondary\"} onClick={handleFavorite}>\n              {favorited && \"Following\"}\n              {!favorited && \"Follow\"}\n            </Button>\n            {/*Conditional render when listing belongs to current user*/}\n            {editable && <p className=\"profile-owner-message\">This is your listing</p>}\n            {/*Apt details below*/}\n            <ListGroupItemHeading style={{fontWeight:\"bold\",fontSize:\"30px\"}}>{ currentApt.subject }</ListGroupItemHeading>\n            <ListGroupItemText>\n              { currentApt.bedroom_count } Bedroom, { currentApt.bathroom_count } Bath <br/><br/>\n              { currentApt.street_number } <br/>\n              { currentApt.city}, { currentApt.state } <br/><br/>\n              <strong>{ currentApt.rent }</strong> <br/><br/>\n              { currentApt.description } <br/><br/>\n              <strong>Building Manager:</strong> { currentApt.building_manager} <br/>\n              <strong>Phone:</strong> { currentApt.phone } <br/>\n              <strong>Contact Hours:</strong> { currentApt.hours }\n            </ListGroupItemText>\n          </ListGroupItem>\n\n          {/*Only show edit or delete buttons if listing belongs to current user*/}\n          {editable &&\n            <div className=\"edit-buttons-wrapper\">\n              <NavLink to={`/listings/${currentApt.id}/edit`}> <Button style={{marginRight:\"10px\",border:\"0px\"}}>Edit Listing</Button></NavLink>\n\n              <Button style={{backgroundColor:\"#ff726f\",border:\"0px\"}} type=\"submit\" onClick={ toggle }>Delete Listing</Button>\n            </div>\n          }\n        </ListGroup>\n      </Container>\n\n      {/*Modal window upon clicking the first delete button*/}\n      <Modal isOpen={modal} toggle={toggle}>\n        <ModalBody>\n          Are you sure you want to delete your listing?\n        </ModalBody>\n        <ModalFooter>\n          {/*Redirect back to listings page if delete is successful*/}\n          <NavLink to=\"/listings\">\n            <Button color=\"danger\" onClick={handleDelete}>Delete Listing</Button>{' '}\n            {success && <Redirect to=\"/listings\" />}\n          </NavLink>\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  )\n}\n\nexport default ApartmentProfile\n"]},"metadata":{},"sourceType":"module"}